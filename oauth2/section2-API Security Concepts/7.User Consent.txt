One of the goals of OAuth is to protect a user's data and ensure it's shared with only
parties that the user wants to share it with.

If you think back the last time you clicked a Sign In with Twitter button, you might
remember that you saw a screen like this asking if you are sure you want to share your information.
This screen that interrupts the authorization flow is known as the consent screen because it's asking
the user for permission.

In this lesson, we'll look at how the screen is critical to the flow so that the authorization server knows
it's doing its job and protecting the user in order to better understand why this step is useful.

Let's first look at what happens if we don't have this screen in the flow.

If you read through the OAuth spec, you'll see references to the password grant, also known as the resource
owner passrod flow.

The way that flow works is the application presents a password prompt in the app itself,

collects the user's password and then sends it to the authorization server and gets back an access token.
The request itself is so simple it's barely worth mentioning.

It's just one POST request.

The token endpoint that contains the username and password along with the client and optionally the client secret.

Let's take a step back and think about this for a minute.

The user hands over their password to the client and the client goes and takes it to the authorization server
to get an access token.
if you remember back in the first section of this course, we saw examples of third party apps asking you to enter
your Gmail password.

It's clearly a problem if a third party app were to use password grant because the user is handing their password
over to an app under another developer's control.

This has always been a problem and the spec has always advised against allowing third party apps to use the password grant.

What's more subtle, though, are the probelms that even first party apps have when using the password grant.
So let's think about this from the point of view of the authorization server.
As the authorization server, your job is to protect the resources, ensuring only applications and users that are
authorized get access.

If you get a password grant request, all you see is that the application is presenting the user's credentials. You
don't actually have any way to know if the user themselves are actually trying to log in.

You don't know if the user is using this app right now or if the app has stored the user's password from the last time
they logged in. And that's because this request looks the same, whether or not the user is actually actively using
the application.

So even if you do trust the app not to store and replay the suer's password, you also can't be sure that the user
actually agrees to whatever access the app is requesting.
It might be telling the user it's going to only read their password, it can actually request a token that could modify
their photos too.

The thing missing from this is actually confirming that the user is actually at the computer and has initiated and agrees
this request right now.

So this is really where th role of the authorization server solves this.
By inserting the authorization serve into the flow. The application actually first directs the user to the authorization server.

The user types in their password there, approves the request after they see the consent screen, and then they get
taken back to the app.

This way, the user is only ever typing their password into the authorization server.

And then the authorization server knows that the user is actually attempting to use that application.
It prevents the application from being able to do anything without the user actually being in front of the keyboard.

It also means  the application can ask for certian kinds of access and the authorization server can show that request to the user.

And that way the authorization server knows the user is actually agreeing to it.

And that's this consent step here where the user is shown a prompt asking if they would like to share their data
with the application.

There's another huge problem with the password grant which is solved by using a redirect flow.

In recent years, we've seen an explosion in the use of multifactor authentication, which is a huge step up for security.

The problem with the password grant is there's really no room to add multifactor into the flow.

The grant is just exchanging the password for an access token, and it wasn't designed to add multifactor into the flow.

If you did want to extend the password grant to support multifactor, you're going to have to just do it on your own
and make it up and build it into each one of your applications from scratch.

So instead, by redirecting the user to the authorization server , you can add a new multifactor method at any time by
adding it to your authorization server.

And then suddenly every application using that server will immediately support it without changing any of the code
in the applications.
This has a huge impact if you're responsible for deploying dozens or hundreds of apps,

especially across different teams, since it means you no longer need to coordinate the efforts to change or add
support for a new multifactor authentication methods, you could just turn them on with the authorization server
whenever you want.

The last thing I want to say about user consent is that typically the step of actually interrupting and asking the user for
permission is skipped for first party confidential clients.

The idea is that if you're logging into the web application of your own service where a user has an account,
you don't really need to ask their permission to log in, since it's a first party scenario.

And if it's a confidential client, then there's really no app impersonation risk either.

So it's safe to skip the consent feature and redirect back immediately.

That said, that redirect step is still key here as that's how you're able to get all the security benefits
and better add multifactor authentication.

But you can have the user automatically redirected back without a consent prompt if you wish.

If you're on a mobile or single page app and if you are worried that someone might try to trick users into loggin
to a fake app, impersonating your own apps, then you might still want to turn on the consent feature for your own
first party apps just so that you can make it harder for attackers to trick your users into authorizing a fake
application.

So in summary, using a redirect based method is a much sager and much more flexible alternative to the password
grant and allows you to easily add multifactor authentication in the future and provides assurance that the user
is really in front of the computer when logging into applications.































































































