In this lesson, we'll walk step by step through a complete authorization code flow for web applications.
In this example will be demonstrating with sample URLs, and we'll talk about some differences you may
encounter with OAuth servers in the wild.

At the end of this section, you'll get a chance to try this out on your with a real OAuth server.
So once you've registered an application with the OAuth server and have a client ID and secret, you're
ready to begin the flow.

We'll first walk through a summary of the flow and then go step by step showing the details.
So across the top we have the roles we defined earlier.

The user is using their browser to access the application, which needs an access token from the OAuth server
so that it can go make API requests to the API.

Now, remember, the end goal here is to deliver an access token from the server to the application.
And ideally we should have the application receive the access token via the back channel, that way it stays out
of the browser.
In this case, we're talking about an app running on a web server, which means if the access token is delivered
via the back channel, then the browser really never even needs to see the access token at all, which
is the most secure option.

So let's walk throught this.

The flow starts out with the user clicking the login button.

That's like the user saying, I would like to use this application.

Before the app redirects the user, it makes up a new secret for this particular flow.

This is not the client secret.

This is a random string the app generates and it's different every time it starts to flow.
This is called the PKCE Code Verifier.

So it holds onto that code verifier in the app's server and then calculates a hash of it called the
Code Challenge.

And a hash, of course, is a one way operation.

So somebody knows the hashed value.
They can't reverse engineer it and figure out the secret.

So it takes that hash and includes it in that URL, which it builds to send the browser over to the server.

It'll redirect the user to the server with a bunch of stuff in the query string,
including that hash, the client ID, redirect URL, and scope.
So the user ends up at the server delivering the message the app sent.

Now, if you look at what's going on here, this is the first message sent in the front channel.

We talked about the front channel in the previous section, but the key takeaway.
is that the front channel is using the browser's address bar to send a message between two other computers.

So what's really happening here is ther app is trying to request some stuff from the server, but instead of
requesting it directly, it handles the request to the user to deliver to the OAuth server.

So because this is a fornt channel request where we can never be sure that the request isn't being snooped on,
that's why the app only  sends the hash of the secret rather than the secret itself. All right.

So the user is now at the OAuth server and the server asks them to log in, they log in,
they do any sort of multifactor auth necessary, and then that server asks them to confirm if they really are
trying to log into the app.
If they say, yes the server needs to send the user back to the app and also deliver this temporary one time
use authorization code.

So it takes the app's redirect URI, adds the authorization code in the query string and then sends
the user's browser there to deliver that back to the app.
This is the second message passed in the front channel.

This isn't really two steps here.

It's actually the OAuth  server delivering the authorization code to the application by going through
the user's browser.
And again. because this is a front channel request, the server can't reall yknow for sure that the code
was receive by the application.
So this authorization code is valid for only one use and it has to be redeemed within a short period of time,
typically under a minute. So now that the application has the authorization code from the request the user's
browser made, it can now go make a back channel reqeust to exchange that for an access token. So this request.
is made form the app's server to the OAuth server.

So it never goes through ther browser or anything that the user can see.
So this request includes the authorization code, the application's client ID and client secret, as well as
the plaintext PKCE secret that the app generated at the start.

So the server looks at this request and says, ok, cool, I see that I just issued this code.
It hasn't been used yet and it was intended for this client.

And here's the matching client secret.

And when the request was started, I saw this hash, the code challenge.

So I'm going to go calculate the hash of this code verifier and compare the hashes.

And if they match, then I know that the thing redeeming this code is the same as the thing that started the flow.

So the server generates the access token and returns it in the response.

Now the flow is done and the app can go make API requests with the access token .

So you might have notived that the Code Challenge and Code Verifier parameters are from the PKCE extension.

But PKCE was originally developed for mobile apps and we're talking about here server side apps as well.

As it turns out, the guidance form the OAuth working group is changing to recommend PKCE for all kinds of
applications, even if you have a client secret.

The reason is because even with a client secret, there's still a subtle attack that's possible to pull off
where you could essentially  swap authorization codes and end up logged into somebody else's account with
the real application.

So it's not the same as stealing an access token, but it's potentially even worse because the application
and the server wouldn't even know that this attack had happened.

This attack is called the authorization code injection attack and it takes a while to expain it so we won't
go into it in detail here.

But just know that thankfully, PKCE solves that attack, which is the primary reason that PKCE is now being recommended
even for confidential clients.

So let's go through this flow again step by step.
But this tiem we're going to look at the actual parameters and values used in the reqeusts. So before the app sends
the user off to the OAuth server, it generates a random string called the code verifier.

That will be a string between 43 and 128 characters long.

Then it's going to take that string, calculate the SHA256 hash of it, and then base64 URL

encode that result. Base64 URL encoding is just Base64 encode function, you can easily
turn that into a base64-URL-encode function.

Ok, so now you're ready to build the link to send the user over to the OAuth server,
you'll need to find the authorization endpoint either by looking at the documentation for
the OAuth server or by using the server's metadata URL to find it programmatically.

So you take that URL and you add a bunch of query string components, starting with
response type=code.

That tells the server that you're doing the authorization code flow.
Next, add your client ID to tell the OAuth server which app is making this request.

You'll need to also include the app's redirect URL.
But it has to match one of the redirect URLs you added when you registered the app.

You'll need to find the scope values to request based on the API that you're trying to
access. Let's just say, for example, it's photos.

The state parameter was originally used for CSRF protection, but PKCE provides that
protection as well, so you can use it for storing application specific state now,
such as which page to redirect the user to after they log in, like cart or checkout.

But a side note here.
This is only safe to use this way if you are sure the OAuth server supports PKCE.

If the server doesn't support PKCE, then you will need to make this a random value.
Lastly, include the code challenge, which is that hash of the code verifier, as well as
the hash method you used S256 for SHA256.

So you turn all those parameters into a URL and you're ready to send the user off to the
server to go log in.

Your app won't see the user again until they come back to the redirect URL with the
authorization code. All right.
So the user goes and logs and approves the request and then the OAuth server generates
that one time use authorization code and sends them back to your application.

Another possibility is that there was some sort of error and the server redirects back to
your app with an error code in the URL instead of the authorization code.

But if it worked, the user will be back at your app at the redirect URL, and there will
be an authorization code in the query string as well as that state value.

You should double check the state value matches the value you used in the request.

That's for CSRF protection, and then you're ready to exchange that authorization code for
an access token. So in this step, you're going to be making a backchannel HTTPS request
from your application server to the servers token point.

That's a separate endpoint that you'll need to look up as well.

This's a separate endpoint that you'll need to look up as well.

This will be a post request using a traditional form-encoded POST body.

The parameters in this request will be grant_type=authorization_code.

This tells the server that you're doing the authorization code grant.

You'll include that authorization code you got in the query string
as well as the redirect URI used in the request.

And since you are using PKCE, you'll also need to include the code verifier, which is the
plain text secret that your app made up at the beginning.

You'll also need to include the application's credentials.

That's the client ID and client secret.

Now, different servers may expect this either in the post body or as in basic OAuth header.
So double check your servers docs for that one.

Assuming everthing works, the authorization server will reply back with an access token,
the expiration time of the token and possibly also a refresh token.

And now your app is done with the OAuth flow and it can use that access token to make API
requests. If you got back a refresh token, then when the current access token expires,
you can use the refresh token to get a new access token without going through that whole
flow again. Using the refresh token is a lot like using the authorization code.

You make a post request to the token endpoint, but this time you say grant type is refresh
token and you include the refresh token in the post body as well.

You'll also still have to use the client and client secret.

That way the OAuthe server knows it's really this app making the request.

This is of course, a back channel request from your web server to the OAuth server,
and assuming the refresh token is still valid, you'll get back a new access token and
possibly a new refresh token.

Again, every OAuth server is going to do something slightly different here.

Sometimes you may get back a new refresh token and sometimes you won't.

If you don't get a new one, it means the one you have should probably keep working.

But do keep in mind that there is no guarantee a refresh token will work when you go to
use it, because there are actually a lot of reasons it might expire.

The user could be deleted, the user could have revoked the permissions and admin may have
deleted an application.

But regardless of the reason, the request to use the refresh token would fail.

The only thing your app can do at that point is attempt a new flow form the beginning.

So that's the authorization code flow for confidential clients.

In this lesson we also demonstrated using the PKCE extension to protect against
authorization code injection attacks.
PKCE for confidential clients is relatively new guidance form the OAuth group.

It's included in the Security Best Practice as well as OAuth2.1.

In practice, you may find OAuth servers in the wild that don't support PKCE for
confidential clients yet since that advice is still relatively new.

And in that case you should definitely recommend that they add PKCE support.

But in the meantime, you'll need to make sure you are using a random state value to
protect against CSRF attacks.

At the very least, the good news is you can still include PKCE parameters in the request,
even if the server doesn't support PKCE, because servers have to ignore parameters they
don't recognize. And that means you can actually code your OAuth clients with PKCE today.

And then when the server finally does add support, you won't have to go back and rebuild
your applications. In the next lesson, we will try out the authorization code flow with a
real OAuth server. So I will see you there.





























































































































































































































