这个题目涉及的是如何在分布式系统架构下实现弹性扩展和高可用服务，确保 7*24 小时服务的连续性，并能够正确识别同一个客户在不同服务器上的请求。我们可以从以下几个角度来解答：

### 1. 弹性扩展和 7*24 小时服务可用
为了在不影响客户请求的情况下实现弹性扩展和高可用性，我们需要借助以下策略：

#### a. **负载均衡**：
   - **动态负载均衡**：利用负载均衡器（如 Nginx、HAProxy、AWS ELB 等）来分发请求。负载均衡器会根据服务器的负载情况将请求分配给最合适的服务器。如果某个节点不可用，负载均衡器可以将流量引导到健康的节点，避免服务中断。
   - **自动扩展**：利用云平台的自动扩展功能，如 AWS Auto Scaling 或 Kubernetes 集群自我调节功能，可以根据流量的实时变化自动增加或减少计算资源（例如启动/停止服务器、容器等）。

#### b. **高可用性设计**：
   - **冗余设计**：服务节点需要配置为多节点冗余。例如，可以将服务部署在多个数据中心或可用区，并且每个数据中心/可用区内部署多台机器。这样，如果某一台机器或某个数据中心出现故障，其他机器和数据中心可以接管服务。
   - **心跳监测**：节点之间需要进行心跳监测，若发现某个节点宕机，自动将请求转发到健康节点。故障转移可以通过负载均衡器或应用层的监控和调度来完成。

#### c. **容器化和微服务架构**：
   - 利用容器化技术（如 Docker）和 Kubernetes 等容器编排工具，可以使服务更加灵活，支持自动扩展和高可用性管理。微服务架构能够将不同功能模块独立部署，支持按需扩展，不会影响整个系统的稳定性。

### 2. 如何识别同一个客户在不同服务器的请求
为了能够准确识别同一个客户在不同服务器上的请求，我们可以采用以下方法：

#### a. **会话共享（Session Sharing）**：
   - **分布式会话管理**：在传统的单点服务器架构中，用户会话通常存储在本地内存或文件中。但在分布式系统中，用户的请求可能会分发到不同的服务器。为了保持会话的一致性，可以使用分布式缓存（如 Redis）来存储会话信息。这样，无论请求被分配到哪个服务器，都会从缓存中获取该客户的会话信息。
   - **Token 机制（如 JWT）**：采用基于 Token 的认证方式（例如 JWT），每次请求中都会携带一个包含客户信息的 Token。由于 Token 是无状态的，服务器可以通过解析 Token 来识别客户身份，而无需依赖于服务器本地的会话数据。这样，即使请求跨越多个服务器，也可以无缝识别同一个客户。

#### b. **一致性哈希**：
   - **客户端请求的哈希路由**：通过一致性哈希算法，将客户请求路由到同一台服务器上，从而保证同一客户的请求始终被处理在同一台服务器上。这样可以避免请求频繁跨越不同的服务器，减少会话信息丢失的风险。

#### c. **分布式缓存与共享数据库**：
   - 使用分布式缓存（如 Redis、Memcached）来存储客户的状态信息，确保多个服务器能够访问和更新这些共享数据。
   - **共享数据库**：数据库可以作为客户端信息的集中存储，所有的服务器都能够访问这个数据库，以识别不同请求是否来自同一客户。数据库操作需要确保高效，并且避免成为性能瓶颈。

### 综合方案
1. **负载均衡器**负责将请求均衡地分发到多个服务器。
2. **自动扩展系统**根据流量自动增加或减少计算资源。
3. **分布式缓存（如 Redis）**用于存储会话数据，确保多个服务器能够共享客户的会话信息。
4. **Token 机制（如 JWT）**在每次请求中携带用户身份标识，保证无状态的身份认证。
5. **一致性哈希**算法可以将同一客户的请求始终路由到同一台服务器，减少跨服务器的请求。

通过这些设计，分布式系统可以在不影响客户请求的情况下实现弹性扩展，同时保证 7*24 小时的服务可用性，并且能准确识别同一客户的请求。