在 Spring 框架的 **`org.springframework.core.io.support`** 包下，**`ResourcePatternUtils`** 是一个**工具类（utility class）**，专门用来帮助处理和解析 **资源匹配模式（resource pattern）** 的。通俗一点说，如果我们要在代码里处理类似 `classpath*:com/example/**/*.xml` 这样带有通配符（`*`、`**`）的资源路径，就会涉及到 **`ResourcePatternResolver`** 等机制，而 `ResourcePatternUtils` 提供了一些简化操作、减少重复代码的便捷方法。

---

## 一、为什么会有 ResourcePatternUtils？

1. **统一对带通配符的资源路径的处理**
   在实际开发中，可能需要一次性查找多个文件（例如批量加载某种配置文件、或扫描某个包下所有 `.class` 文件等）。这些文件的路径往往带有通配符：
   - `classpath*:com/example/service/**/*.class`
   - `file:/home/app/config/*.properties`
   - `classpath:my/package/*-mapping.xml`

   Spring 提供了 `ResourcePatternResolver` 这样一个接口（及其常用实现类 `PathMatchingResourcePatternResolver`）来处理这些带通配符的资源路径。但如果我们手上只有一个 `ResourceLoader`（不一定是 `ResourcePatternResolver`），直接用起来会比较繁琐。

2. **简化 `ResourceLoader` 和 `ResourcePatternResolver` 的适配**
   - 在 Spring 中，`ResourceLoader` 是最基础的“资源加载”抽象，可以加载单个资源（如 `classpath:xxx.xml`、`file:/path/xxx.properties`），但它本身**不处理**带通配符的模式。
   - `ResourcePatternResolver` 在 `ResourceLoader` 之上再做了一层封装，以支持 `getResources("pattern")` 这样的批量加载。
   - `ResourcePatternUtils` 的一个核心作用就是：**如果给定的 `ResourceLoader` 本身就是 `ResourcePatternResolver`，直接用它；否则自动包装成 `PathMatchingResourcePatternResolver`**，从而让调用方能够方便地使用通配符扫描。

> **因此**，`ResourcePatternUtils` 对外提供了若干静态方法，让开发者不必每次都手动去判断、转换，减少了模板代码的编写量。

---

## 二、核心功能与方法

### 1. `getResourcePatternResolver(ResourceLoader resourceLoader)`

这是 `ResourcePatternUtils` 最常用、最典型的方法。其示例实现逻辑大致如下：

```java
public static ResourcePatternResolver getResourcePatternResolver(ResourceLoader resourceLoader) {
    Assert.notNull(resourceLoader, "ResourceLoader must not be null");
    // 如果传入的 resourceLoader 本身就是 ResourcePatternResolver，直接强转返回
    if (resourceLoader instanceof ResourcePatternResolver) {
        return (ResourcePatternResolver) resourceLoader;
    }
    // 否则，使用 PathMatchingResourcePatternResolver 包装，生成一个支持通配符的 resolver
    return new PathMatchingResourcePatternResolver(resourceLoader);
}
```

- **作用**：
  - 如果我们已经有一个 `ApplicationContext`（它同时实现了 `ResourceLoader` 和 `ResourcePatternResolver`），就能直接拿来用；
  - 如果只是一个普通的 `ResourceLoader`，它并不会自带通配符解析功能，此时 `ResourcePatternUtils` 会帮我们自动**包装**成 `PathMatchingResourcePatternResolver`。这样，无论你传入的是 `ApplicationContext` 还是别的实现，都能最终拿到一个能处理通配符的 `ResourcePatternResolver` 对象。

- **典型用法**（简化示例）：

  ```java
  @Autowired
  private ResourceLoader resourceLoader;

  public void scanResources() throws IOException {
      // 利用 ResourcePatternUtils 获得一个 ResourcePatternResolver
      ResourcePatternResolver resolver =
          ResourcePatternUtils.getResourcePatternResolver(resourceLoader);

      // 现在我们就能使用带通配符的扫描了
      Resource[] resources = resolver.getResources("classpath*:com/example/**/*Repository.class");
      for (Resource resource : resources) {
          System.out.println(resource.getFilename());
      }
  }
  ```

### 2. 其它辅助方法

在早期版本的 Spring（例如 4.x、5.x）里，`ResourcePatternUtils` 还可能提供一些工具方法来**判定**一个字符串是否是“可解析为 URL 的资源位置”。例如（仅作参考）：

```java
public static boolean isUrl(String resourceLocation) {
    if (resourceLocation == null) {
        return false;
    }
    // 如果字符串以 "classpath*:"、"classpath:", "file:", "http:" 等开头，大概率是 URL
    return (resourceLocation.startsWith(CLASSPATH_ALL_URL_PREFIX) ||
            resourceLocation.startsWith(CLASSPATH_URL_PREFIX) ||
            resourceLocation.contains("://"));
}
```

> 这些方法可以帮助框架或我们自己的工具在处理资源路径前先做一次简单判断，以决定要不要用某种特殊的加载逻辑。不过在现代 Spring 版本中，很多场景下直接使用 `PathMatchingResourcePatternResolver` 就可以了。

---

## 三、在 Spring 中的应用场景

1. **组件扫描、配置文件扫描**
   大多数情况下，Spring 本身会在内部调用 `ResourcePatternUtils` 来简化对 `ResourceLoader` 的封装。例如在 `ClassPathScanningCandidateComponentProvider` 中，有大量关于“资源扫描”的逻辑，就可能间接使用到它。
   如果我们自己想写一个“自定义扫描器”，从指定包路径下查找特定类型的文件或注解类，也可以直接调用它。

2. **插件机制、动态加载**
   在某些插件化场景（例如一个平台要动态加载外部 jar 或配置），我们可能拿到的是 `ApplicationContext` 以外的 `ResourceLoader`。为了统一处理资源匹配模式，就可以借助 `ResourcePatternUtils` 来获取一个能解析通配符的 resolver。

3. **集成三方库**
   某些第三方库可能要求我们传入 `ResourcePatternResolver` 才能搜索资源，如果我们手头只有 `ResourceLoader`，那用这个工具方法转换一下就行。

---

## 四、与其它相关类/接口的对比

1. **`ResourceLoader`**
   - 只提供“单资源加载”的接口：`Resource getResource(String location);`
   - 不负责处理通配符模式，比如 `**`, `*`, `{}` 等。

2. **`ResourcePatternResolver`**
   - 扩展自 `ResourceLoader`，多了一个 `Resource[] getResources(String locationPattern)`。
   - 内部典型实现是 `PathMatchingResourcePatternResolver`，能够解析类似 `classpath*:`、`file:` 以及通配符模式。

3. **`PathMatchingResourcePatternResolver`**
   - 这是 `ResourcePatternResolver` 的默认实现类。主要借助 `PathMatcher` 和内部规则来支持通配符扫描文件系统、类路径等。

4. **`ResourcePatternUtils`**
   - 它并不是一个核心加载器或者解析器，而是一个**工具类**，主要用途是：
     1. 提供简化方法将 `ResourceLoader` **安全地** 转换 / 包装成 `ResourcePatternResolver`；
     2.（在某些版本中）提供判断资源 URL 等辅助方法。

---

## 五、使用注意事项

1. **缓存和性能**
   - 当使用通配符扫描时，如果路径包含 `classpath*:` 并指向大量包或文件，扫描可能涉及到遍历多个 jar 包或文件夹。要注意**性能**影响，以及避免将扫描范围设置得过大。
   - `ResourcePatternUtils` 本身只是一层工具，不提供缓存；真正的**路径匹配和扫描**由 `PathMatchingResourcePatternResolver` 来完成，也没有额外缓存。若有批量/重复调用需求，可以考虑自己缓存结果，或者利用更上层的机制（如 Spring Boot 中的自动配置扫描）。

2. **兼容性**
   - 不同 Spring 版本中，`ResourcePatternUtils` 的方法可能略有变化，但核心功能（`getResourcePatternResolver`）一直都在。
   - 在 Spring 6（基于 Java 17）或更高版本，以及 Spring Boot 3.x 中，这些类和方法的主要用法仍保持一致。

3. **避免过度使用**
   - 如果已经直接使用了 `ApplicationContext`（它本身就是 `ResourcePatternResolver`），其实不一定要显式调用 `ResourcePatternUtils`。只有在拿到的对象不是 `ResourcePatternResolver` 时，才需要用它来做包装。

---

## 六、示例：自定义资源扫描

下面是一个简单的示例代码片段，说明如何使用 `ResourcePatternUtils` 扫描多个位置的配置文件：

```java
import org.springframework.core.io.Resource;
import org.springframework.core.io.ResourceLoader;
import org.springframework.core.io.support.ResourcePatternResolver;
import org.springframework.core.io.support.ResourcePatternUtils;
import java.io.IOException;

public class CustomResourceScanner {

    private final ResourcePatternResolver resolver;

    // 构造方法注入一个 ResourceLoader
    public CustomResourceScanner(ResourceLoader resourceLoader) {
        // 用 ResourcePatternUtils 统一获取一个 ResourcePatternResolver
        this.resolver = ResourcePatternUtils.getResourcePatternResolver(resourceLoader);
    }

    public void scanAndPrint() throws IOException {
        // 这里使用通配符扫描多个 properties 文件
        Resource[] resources = resolver.getResources("classpath*:config/**/*.properties");
        for (Resource resource : resources) {
            System.out.println("Found resource: " + resource.getURI());
        }
    }
}
```

- **使用**：我们可以在 Spring 容器中注入一个 `ResourceLoader`（它可能是 `ApplicationContext`），然后创建 `CustomResourceScanner`。再调用 `scanAndPrint()` 就能看到扫描到的结果。

---

## 七、小结

1. **定位**
   `ResourcePatternUtils` 是 Spring Core 层的一个**辅助工具类**，主要为了解决“当我们拿到一个 `ResourceLoader` 却想使用**批量、通配符**资源解析”这一常见需求。

2. **核心功能**
   - **`getResourcePatternResolver(...)`** 方法：一键获取（或创建）支持通配符解析的 `ResourcePatternResolver`；
   - 在早期版本中，还可能有一些“判定是否是 URL”的小工具方法。

3. **应用场景**
   - 在自定义扫描、批量加载配置或文件时，如果只有 `ResourceLoader` 对象，需要**通配符**功能，就能用这个工具进行**包装**；
   - 内部实现通常是 `PathMatchingResourcePatternResolver`。

4. **优势**
   - 简化代码：不用自己去写“instanceof + 强转” 或自己 new `PathMatchingResourcePatternResolver`；
   - 保持 Spring 一贯的**抽象分层**和**易扩展**理念，用一个工具类来提供**最少惊艳**（least surprise）的方式兼容不同加载器。

---

### 总结

> **`ResourcePatternUtils`** 在 Spring 中属于一个“**小而精**”的工具类。它最主要的价值是：
> 1. 如果传入的 `ResourceLoader` 已经是 `ResourcePatternResolver`，就原样返回；
> 2. 否则，自动把它包装成 `PathMatchingResourcePatternResolver`，从而支持通配符解析。

对于需要编程式批量加载资源、扫描路径的场景来说，`ResourcePatternUtils` 让我们不必关心底层实现细节，也不必重复写很多样板代码，极大地**简化了资源模式解析**在代码层面的使用难度。