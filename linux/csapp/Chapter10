Part III  Interaction and Communication between Programs



Unix I/O
10.1 Unix I/O

linux 文件就是一系列字节组成;
所有的I/O设备，例如网络，磁盘，终端，都可以看成文件；所有的输入，输出都可以类比对文件的读写操作；

All I/O devices, such as network,disks, and terminals,are modeled as files,
and all input and output is performed by reading and writing the appropriate fiels.
This elegant mapping of devices to files allows the Linux I/O, that enables all input
and output to be performed in a uniform and consistent way:

Opening files:
应用程序访问I/O设备通过内核实现.内核返回一个小的非负整数，它就是文件描述符，它就是操作该文件的钥匙，有了它就可以对文件进行一系列的操作；
当然，这些操作是由内核提供的，内核记录着对该文件的所有操作记录信息，应用程序仅记录对文件描述符的操作。
The kernel keeps track of all information about the open file.
The application only keeps track of the descriptor.

应用程序--> 文件描述符
内核---> (系统api)实际操作文件

descriptor:
0 standard input
1 standard output
2 standard error


Changing the current file position
an applicatin can set the current file position k explicitly by performing a seek operation

Reading and writing files.

The kernel maintain a file position k ,initally 0, for each open file.

总结10.1 Unix I/O
linux里把 网络，磁盘，终端，读看作文件，
而所有的输入，输出看成对文件的读写操作即I/O
打开文件：文件描述符
改变当前文件的偏移offset： seek
读写文件： read，write
关闭文件：close ，内核释放内存数据，回收文件描述符到文件描述符池中。（异常关闭也是）



10.2 Files

linux和windows的文本行结束符
\n 和 \r\n

dos2unix
unix2dos

当前目录 .
上级目录 ..
相对路径，绝对路径

10.3 Opening and Closing Files
int open(char *filename, int flags, mode_t mode)
Returns: new file descriptor if OK,
-1 on error

filename: file descriptor
flags: the process intends to access the file:
(O_RDONLY. Reading only;O_WRONLY.Writing only;O_RDWR.Reading and writing)
mode: the access permission bits of new files
(S_IRUSR: [User(owner) can read this file],
S_IWUSR: [User (owner) can write thie file]
S_IXUSR: [User (owner) can execute this file])



10.4 Reading and Writing Files
文件读写
ssize_t read(int fd,void *buf, size_t n);
returns: number of bytes
read if OK, 0 on EOF, -1 on error
ssize_t wirte(int fd,const void *buf, size_t n);
returns: number of bytes
written if OK,  -1 on error

文件读写的的设计

size_t   unsigned long
ssize_t  long
返回数据理论上只有传入数据的一般，
long ，-2^63-2^63
unsigned long    0-2^64
实际为了返回-1异常，舍弃了理论的一半返回；

短计数发生的场景：
1.  文件只有20字节，实际读取50字节；
2. 从终端读取文本，read函数每次通常会读取一行文本，返回的即是读取的文本行的字节数
3. 读取网络socket，由于网络延迟或者内部缓冲限制而返回“短计数”


10.5 Robust Reading and Writing with the Rio package


Trap和信号的区别：
Trap：内核级别
信号： 用户级别



read
fgets

char *fgets(char *str, int num, FILE *stream);
参数:
char *str：指向用于存储读取数据的字符数组的指针。
int num：最多读取的字符数，包括空终止字符（'\0'）。通常，num 的值设置为数组 str 的大小。
FILE *stream：指向 FILE 结构的指针，该结构代表一个打开的文件或其他输入/输出流。
功能和行为
读取操作：fgets 从指定的 stream 中读取字符，直到发生以下三种情况之一：
读取了 num-1 个字符。
遇到换行符（\n），换行符也会被读取并存储在字符串中。
遇到文件结束（EOF）。
字符串终止：无论在何种情况下停止读取，fgets 都会在字符串的末尾添加空字符（'\0'）以形成一个完整的字符串。
返回值：
如果成功读取，fgets 返回 str 的指针。
如果在读取任何字符之前遇到文件结束或发生错误，返回 NULL

ssize_t read(int fd, void *buf, size_t count);
fd：文件描述符，指定了要从中读取数据的文件或设备。
buf：指向缓冲区的指针，这个缓冲区用于存储从文件描述符中读取的数据。
count：要读取的最大字节数。
功能详解
当你调用 read 函数时，它会尝试从指定的文件描述符 fd 中读取多达 count 字节的数据到缓冲区 buf。读取的实际字节数可以小于请求的字节数，具体取决于几个因素：

文件描述符指向的数据量：如果可用数据少于请求的字节数，read 将只返回可用的数据量。
阻塞与非阻塞模式：在阻塞模式下，read 函数可能会挂起调用进程，直到有至少一个字节的数据可用为止。在非阻塞模式下，如果没有数据可读，read 会立即返回0或 EAGAIN/EWOULDBLOCK 错误。
遇到文件结尾：如果达到了文件结尾，read 函数会返回0，表示没有更多数据可以读取。
中断：如果读取操作被信号中断，read 可能返回 -1 并设置 errno 为 EINTR。


read
fgets
rio_readinitb  缓存初始化； 在rio_readn 和rio_readlineb 读取前的缓存初始化
rio_readn  读取指定字节的数据，无应用层级缓冲区，基于文件描述符的指定字节读取;适合明确从文件或者网络中读取固定大小的数据块
rio_readlineb   读取行文本行数据，有应用级的缓冲区， rio_t 结构体内部缓冲区，rio_readinitb函数初始化，按行读取
rio_read  应用级缓冲区，rio_t 结构体内部缓冲区，适用于高频率小读取   低级的辅助函数，通常不直接由应用程序直接调用；流数据，连续的数据读取
rio_readnb  应用级缓存 ，适用于高频率小读取， rio_t 结构体内部缓冲区，每次读取固定数据的数据

在 RIO (Robust I/O) 库中，各个函数名称的全称可以基于它们的功能来推断。以下是每个函数的概括和全称推断：

### 1. rio_readinitb
- **Full Name**: Robust I/O Read Initialize Buffer
- **Description**: This function initializes a `rio_t` structure that is used across the RIO functions to manage an internal buffer associated with a file descriptor.

### 2. rio_readn
- **Full Name**: Robust I/O Read N Bytes
- **Description**: This function reads a specified number of bytes (`n` bytes) from a file descriptor into a user-provided buffer,
ensuring that it reads the exact amount unless the end of file is reached or an error occurs.

### 3. rio_readlineb
- **Full Name**: Robust I/O Read Line Buffer
- **Description**: This function reads a line from a file descriptor into a user buffer, including the newline character,
using the `rio_t` structure's internal buffer for efficient data handling.

### 4. rio_read
- **Full Name**: Robust I/O Read
- **Description**: This function reads data from a file descriptor into a user buffer using an internal buffer (managed through a `rio_t` structure) to handle partial reads
and interruptions more efficiently.

### 5. rio_readnb
- **Full Name**: Robust I/O Read N Bytes Buffer
- **Description**: Similar to `rio_readn`, this function reads `n` bytes from a file descriptor but utilizes the internal buffer provided by the `rio_t` structure
to potentially handle multiple calls or partial data more efficiently.

These names and functionalities highlight the focus of the RIO library on providing robust, buffer-based I/O operations that handle common issues such as partial reads,
system call interruptions, and stream-based data processing more effectively. Each function is tailored to specific types of I/O needs,
ensuring data integrity and easing the handling of I/O operations in network programming and file management.



10.6 Reading File Metadata

依赖底层函数stat和fstat读取文件的元数据；
struct stat {
	dev_t st_dev;  /* Device */
	ino_t  st_ino;  /* inode */
	mode_t st_mode;   /* Protection and file type */
	nlink_t st_nlink;   /* Number of hard links  */
	uid_t st_uid;  /* User ID of owner */
	gid_t st_gid;  /* Group ID of owner */
	dev_t st_rdev; /* Device type (if inode device ) */
	off_t st_size;  /* Total size, in bytes */
	unsigned long st_blksize;  /* Block size for filesystem I/O */
	unsigned long st_blocks;   /* Number of blocks  allocated */
	time_t  st_atime;  /* Time of last access */
	time_t  st_mtime;  /* Time of last modification */
	time_t  st_ctime;  /* Time of last change */
};


10.7 Reading Directory Contents
opendir(const char *name)
readdir(DIR *dirp)
closedir(struct dirent)


10.8 Sharing Files

文件描述符表（Descriptor Table）
文件表（File Table）
虚节点表（V-node Table）

Descriptor Table
和进程紧密相关，记录了该进程打开的资源文件，如果是两个不同的进程打开了同一个文件，两个进程里的该文件的文件描述符是可可能不一致的。

File Table

记录了进程打开文件的所有记录，例如：每个entry包括文件的当前操作闻之(偏移量)、引用计数，文件打开模式，文件状态标志，以及指向虚节点entry的指针，
和操作系统底层相关

V-node Table
记录文件的元数据信息，维护了inode的信息；

inode 实际记录了文件的元数据信息，

=============================================================================================================================================================

当多个进程同时访问同一个文件进行读写操作时，操作系统需要确保数据的一致性和完整性，防止由于并发访问导致的数据竞争或损坏。为了处理这些问题，操作系统采用了几种机制：

### 1. 文件锁定
文件锁定是确保文件数据一致性的一种常见方法。操作系统提供了不同类型的锁，如共享锁（读锁）和排他锁（写锁）：

- **共享锁（读锁）**：允许多个进程读取文件，但阻止任何进程写入文件。当文件被读取时，其他进程可以同时读取，但不能写入。
- **排他锁（写锁）**：当一个进程需要写入文件时，它会请求排他锁。一旦获得排他锁，该进程可以写入文件，同时阻止其他进程读取或写入。

锁可以应用于整个文件或文件的特定部分（字节范围锁定），这取决于操作系统和具体的文件系统实现。

### 2. 读写操作的原子性
操作系统通常确保基本的文件操作（如写入一个数据块）是原子的，这意味着操作系统在执行这些操作时不会被其他进程的相同操作中断。原子操作保证了在任何给定时间，每个读写操作都完整执行，不会产生部分写入的数据。

### 3. 缓冲和同步
操作系统使用缓冲区来管理对文件的读写操作，提高效率。例如，多个写操作可能首先被缓存，在适当的时候一次性写入磁盘。为了确保数据的一致性：

- **写回策略**：操作系统定期将缓冲区中的数据写回磁盘，或者在某个进程关闭文件或显式调用同步操作时进行写回。
- **数据同步**：函数如 `fsync()` 和 `fdatasync()` 被用来强制立即将缓冲区中的数据写入磁盘，确保数据的持久性和一致性。

### 4. 事务和日志
某些文件系统实现了更高级的事务性机制，如写前日志（Write-Ahead Logging, WAL）或日志结构文件系统（Log-Structured File Systems）。这些机制通过记录即将发生的更改的日志来提高数据的恢复能力和一致性，特别是在系统故障情况下。

### 5. 多版本并发控制（MVCC）
在某些高级文件系统或数据库中，可能使用多版本并发控制技术来处理读写冲突。通过为每个读操作提供数据的快照，MVCC 允许读操作在不锁定文件的情况下进行，而写操作产生新的数据版本。

### 总结
确保多进程同时访问文件时数据一致性的机制多种多样，从基本的文件锁到复杂的事务处理机制。具体采用哪种机制取决于操作系统的设计、文件系统的特性以及应用程序的需求。正确的锁策略和数据同步措施对维护数据完整性和避免并发冲突至关重要。

=============================================================================================================================================================


两个不同的进程， 不用的文件描述符， 相同的文件，
例如： 两次打开同一个文件；例如，父子进程，fork()函数，子进程copy了父进程的descriptor table

在内核释放文件资源占用之前，父子进程一定要先关闭占用的文件描述符


10.9 I/O Redirection

dup2(int oldfd, int newfd);

Descriptor table
file table
v-node table


10.10 Standard I/O

#include <stdio.h>
extern FILE *stdin;  /* Standard input  (descriptor 0) */
extern FILE *stdout;  /* Standard output  (descriptor 1) */
extern FILE *stderr;  /* Standard err  (descriptor 2) */

和linux的标准输入，标准输出，标准错误一样；

Stream

C语言  -->  流 (文件描述符，应用级缓存组成的数据结构);
文件描述符：操作文件
应用级缓存：减少系统I/O

java8 流   -->高效处理集合的抽象，惰性执行，支持并行；

linux管道   --> 进程间通信，单向数据流，使用内存缓冲区来暂存从一端传来的数据，知道另一端读取；


10.11 Putting It Together: Which I/O Functions Should I Use?

Standard I/O functions(fopen,fread,fscanf,sscanf,fgets,fflush,fclose,fdopen,fwrite,fprintf,sprintf,fputs,fseek)
Rio functions(rio_readn,rio_writen,rio_readinitb,rio_readlineb,rio_readnb)
Unix I/O functions(open,read,write,lseek,stat,close)

rio 处理文本高效
Standard I/O 更加通用




























