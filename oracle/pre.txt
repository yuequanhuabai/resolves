虚拟机没有安装ssh服务，无法远程连接：

先检查一遍：
sudo systemctl status ssh
或者：
sudo systemctl status sshd

如果显示：
ssh.server或者sshd.server not found; 则证明没有安装ssh服务；

apt-get: apt-get 最初是为了自动化安装、升级和删除软件包而设计的，它的输出和操作模式被设计成适合自动化脚本处理
apt-cache: apt-cache 用于查询和分析APT软件包的元数据，它的存在是为了帮助用户和管理员理解和管理系统中的软件包关系和属性，这是 apt-get 安装和更新功能之外的需求。
apt: apt 作为一个较新的工具，旨在提供一个更友好的用户界面，整合了 apt-get 和 apt-cache 的一些最常用功能，使命令更加直观易用。


sudo apt-get update

系统添加开机自启动路径：
/etc/systemd/system/
在该路径下添加软链接即可；

和window的路径一样： cmd：  shell:startup
C:\Users\yuequanhuabai\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup
在该目录下的程序会在开机的时候自启动；


sudo systemctl is-enabled ssh
该命令可以判断服务是否开机自启动：

enabled: 服务已被设置为启动时自动启动。
disabled: 服务未被设置为启动时自动启动。
static: 服务不能被启用或禁用，它由其他活动的服务或设置管理。
masked: 服务已被“屏蔽”，即被强制禁用，无法启动。
indirect: 服务的启动是间接的，通常依赖于其他服务或条件。

apt-get upgrade和apt-get dist-upgrade命令的区别：

差不多，但还可以更精确一些。你的理解基本正确，但让我帮你澄清和精确一下细节：
### `apt-get upgrade`
- **更新已安装的包**：`apt-get upgrade` 会更新所有已安装的软件包到最新版本，但前提是这些更新不会引入任何新的依赖关系或改变现有依赖关系。
- **依赖冲突处理**：如果某个包的更新需要新的依赖或者更改现有依赖而这些依赖还未满足，那么该包的更新将不会进行。它不会自动安装新的包或移除现有包来解决这些依赖问题。

### `apt-get dist-upgrade`
- **更智能的包处理**：`apt-get dist-upgrade` 会更新所有已安装的包，并在必要时安装新的依赖或调整现有依赖。如果更新某个包需要移除其他包（为了满足新的依赖条件），`dist-upgrade` 也会处理这种情况。
- **系统底层和依赖更新**：这个命令更彻底，因为它能处理通过普通 `upgrade` 无法解决的依赖问题。它能确保系统中的软件都尽可能是最新的版本，即使这意味着更复杂的依赖变动。

总的来说，`apt-get upgrade` 足以处理大部分常规的更新任务，而且风险较低，因为它不会引入或移除任何软件包。而 `apt-get dist-upgrade` 更适用于需要全面更新的情况，特别是在较大的系统升级中，因为它能更彻底地解决依赖问题。这两个命令的选择依赖于你的更新需求和对系统稳定性的考量。

sudo apt-get upgrade -y
自动同意所有：

安装openjdk-8:
sudo apt-get install openjdk-8-jdk -y

ubuntu查看当前系统安装了哪些jdk：
sudo update-alternatives --config java
或者：
sudo update-alternatives --list java

或者查看标准的安装目录：
ls /usr/lib/jvm/

ubuntu环境变量设置：

1.临时设置：
export VAR=value  可以临时设置环境变量，这种变量仅对当前shell会话有效，并且不会影响其他已经打开或之后开启的shell会话

2.永久设置：

.bashrc  .bashrc 是在每个新开的终端会话中读取，适合那些仅影响终端会话的变量。

.bash_profile 或者 .profile    .bash_profile 和 .profile 在登录时读取一次，适合那些需要在登录后立即生效的设置。


/etc/environment   /etc/environment 由PAM模块读取，是在用户会话开始时设置，与Shell类型无关。


/etc/profile

/etc/bash.bashrc

安装unzip
sudu apt-get install unzip



useradd -m -g dba -s /bin/bash oracle

这条命令是用于在类 Unix 操作系统中创建新用户的命令。这里具体解释一下每个部分的含义：

- `useradd`：这是用于创建新用户的命令。
- `-m`：这个选项表示创建用户的同时，为该用户在 `/home` 目录下创建一个与用户名同名的主目录（home directory）。
- `-g dba`：这个选项指定新用户的初始或主要群组（group）为 `dba`。
- `-s /bin/bash`：这个选项指定新用户的登录 shell，这里是使用 `/bin/bash`，这是 Bash shell 的路径，是很多 Linux 系统的默认 shell。
- `oracle`：这是新创建的用户的用户名。

总结来说，这个命令的作用是创建一个名为 `oracle` 的新用户，为其创建一个主目录，在 `/home/oracle`，将用户的主要群组设置为 `dba`，并指定用户使用 `/bin/bash` 作为登录 shell。这样的设置常见于安装和设置数据库（如 Oracle）的用户环境中。

为 Oracle 的安装目录设置权限：

sudo mkdir -p /u01/app/oracle
sudo chown -R oracle:dba /u01/app/oracle
sudo chmod -R 775 /u01/app/oracle



这两个操作是对系统配置文件的修改，分别调整系统内核参数和用户限制参数，以满足 Oracle 数据库运行的需求。

---

### **1. 修改 `/etc/sysctl.conf`**
- **作用**：配置和调整系统的内核参数。这些参数主要影响系统的内存、共享内存、信号量、网络等资源管理。

#### **Oracle 数据库需要的典型配置：**
```bash
fs.file-max = 6815744                  # 文件描述符的最大数量
kernel.shmall = 2097152                # 共享内存段总页数
kernel.shmmax = 2147483648             # 单个共享内存段的最大大小 (单位: 字节)
kernel.shmmni = 4096                   # 系统支持的共享内存段最大数量
kernel.sem = 250 32000 100 128         # 信号量的设置
net.ipv4.ip_local_port_range = 9000 65500  # 可用端口范围
net.core.rmem_default = 262144         # 默认接收缓冲区大小
net.core.rmem_max = 4194304            # 最大接收缓冲区大小
net.core.wmem_default = 262144         # 默认发送缓冲区大小
net.core.wmem_max = 1048576            # 最大发送缓冲区大小
```

#### **为什么需要这些设置？**
- Oracle 数据库在运行时需要大量的共享内存来存储数据库结构、缓存数据等。
- 信号量（`kernel.sem`）和文件描述符（`fs.file-max`）直接影响数据库的并发连接数和文件操作能力。
- 网络缓冲区参数（`net.core` 和 `net.ipv4`）优化了网络通信性能。

#### **应用更改：**
修改完成后，执行以下命令使其立即生效：
```bash
sudo sysctl -p
```

---

### **2. 修改 `/etc/security/limits.conf`**
- **作用**：配置用户资源限制，主要是对特定用户的文件打开数、进程数等进行限制。

#### **Oracle 用户需要的典型配置：**
```bash
oracle soft nproc 2047          # 用户可启动的最大进程数 (soft 限制)
oracle hard nproc 16384         # 用户可启动的最大进程数 (hard 限制)
oracle soft nofile 1024         # 用户可打开的最大文件数 (soft 限制)
oracle hard nofile 65536        # 用户可打开的最大文件数 (hard 限制)
oracle soft stack 10240         # 用户栈的最大大小 (soft 限制)
oracle hard stack 32768         # 用户栈的最大大小 (hard 限制)
```

#### **为什么需要这些设置？**
- Oracle 用户需要大量的文件描述符和进程资源来处理并发请求。
- 不配置这些限制可能导致系统在高负载下报错，如 "Too many open files" 或 "Out of processes"。

#### **注意：**
某些系统还需要修改以下文件以配合 `limits.conf` 生效：
- `/etc/pam.d/common-session` 和 `/etc/pam.d/common-session-noninteractive`：
  添加以下内容：
  ```bash
  session required pam_limits.so
  ```

---

### **总结**
- **`/etc/sysctl.conf`**：调整内核资源参数，为系统提供更大的内存、信号量和网络资源支持。
- **`/etc/security/limits.conf`**：为 Oracle 用户提供必要的系统资源（文件、进程、栈大小等）。
- 这些调整是为确保 Oracle 数据库能够高效运行和处理大规模并发连接而设置的。







