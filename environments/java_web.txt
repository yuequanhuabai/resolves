java web


tomcat 虚拟路径配置方式：
方式一：

D:\software\develop_tools\tomcat\apache-tomcat-8.5.85\conf\server.xml的
Host标签中添加

<Context docBase="D:\software\develop_tools\tomcat\JspProject" path="/JspProject" />

docBase:项目的实际存放路径
path: 虚拟路径 (绝对路径、相对路径[相对于webapps])

访问路径：http://localhost:8080/JspProject/index.jsp

方式二：
 在D:\software\develop_tools\tomcat\apache-tomcat-8.5.85\conf\Catalina\localhost
 中新建 "项目名".xml 中新增一行：就是上面方式一的那个内容
 <Context docBase="D:\software\develop_tools\tomcat\JspProject" path="/JspProject" />

访问路径：http://localhost:8080/JspProject/index.jsp

如果方式二 "项目名".xml 改为 ROOT.xml

访问路径可以省略为：http://localhost:8080/index.jsp


jsp的执行流程：

在Eclipse中创建的Web项目，浏览器可以直接访问，
但是WEB-INF文件是个例外，必须同过请求转发和重定向才可以访问；


配置tomcat运行环境时
jsp <-> Servlet

目前只能jsp转Servlet,如果需要Servlet转jsp，需要添加依赖
a.将tomcat目录的/lib中的servlet-api.jar加入项目的构建路径

b.右键项目->Build path -> Add library -> Server Runtime (本质还是引入servlet-api.jar，不过把tomcat/lib目录的所有jar包全部引入了，它们包含了servlet-api.jar)


Eclipse中创建的Web项目

统一字符集编码
a.编码分类：
设置jsp文件的编码(jsp文件的pageEncoding属性)；
设置浏览器读取Jsp文件的编码(jsp文件中的content属性)
一般将上述设置设置成一致的编码，推荐使用UTF-8

文本编码：
    i. 将整个eclipse中的文件统一设置 (推荐) windows->preferences->web->Jsp files -> Encoding
    ii. 设置某个项目 （右键properties）
    iii. 设置单个文件（右键properties）

把那个注册，显示的页面重新做一遍；

Servlet2.5
手工创建第一个Servlet
步骤：
编写一个类，继承HttpServlet
重写doGet()\ doPost()方法
编写web.xml 中的servlet映射关系


Servlet3.0
@WebServlet("url-pattern的值")

项目根目录：WebContent、src(所有的构建路径)
例如：
WebContent中有一个文件index.jsp
src中有一个Servlet.java
如果：index.jsp中请求 <a href="abc">...</a>,则 寻找范围：既会在src根目录中找  也会在WebContent目录中找  
如果：index.jsp中请求 <a href="a/abc">...</a>,寻找范围：先在src或WebContent中找a目录，然后再在a目录中找abc
他们找的都是Servlet（HttpServlet）

web.xml中的 / :代表项目根路径
http:localhost:8080/Servlet25Project

jsp中的 / : 服务器的根路径
http://localhost:8888/

构建路径、WebContent：根目录


Servlet生命周期： 5个阶段

加载
初始化：init()  ，该方法会在Servlet被加载并实例化以后执行
服务： service() -> doGet()  doPost()
销毁： destroy(), Servlet 被系统回收时执行
卸载


init()  方法执行时间：
   a 默认第一次访问Servlet时执行
   b 可以修改为tomcat容器启动时自动执行
      i. Servlet2.5: web.xml
          <servlet>
              ...
              <load-on-startup>1</load-on-startup>
          </servlet>
      ii. Servlet3.0
          @WebServlet(value="/WelcomeServlet",loadOnStartup=1)

service()  ->doGet() doPost() : 调用几次，则执行几次
destroy()   关闭tomcat服务时，执行一次


设计模式

空实现类，适配               -->  b方法
Servlet --> GenerateServlet --> HttpServlet(other protocol  Servlet)
a,b,c,d方法    空实现a,b,c,d方法  a方法                                        
                                 c方法
好处: 不用底层每个类都时a,b,c,d 方法，缺点: 多了一个空实现接口；


视图View，前端UI            controller 转发           model 封装逻辑的模型(功能)；封装数据的模型(实体类)
                              

乱码问题：
看数据库是否乱码，数据库乱码，则请求传入的数据编码需求更改，request.setCharacterEncoding("UTF-8")
如果数据库无乱码，响应返回的数据乱码，则是返回的数据编码问题，response.setContentType("text/html; charset=UTF-8"); response.setCharacterEncoding("UTF-8"); 注意顺序
PrintWriter out =response.getWriter()

文件上传：
引入jar包：
 apache： commons-fileupload.jar   依赖下面的jar包
          commons-io.jar


文件下载不需要jar包

文件下载，response对象需要设置两个响应头
response.addHeader("content-Type","application/octet-stream");   //MIME类型: 二进制文件(任意后缀的文件)
response.addHeader("content-Disposition","attachment;filename="+fileName);   //fileName包含文件的扩展名  a.txt

第39节： EL运算。

jstl
引入jar包：
jstl.jar   standard.jar    放到WEB-INF的lib目录里

<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="前缀" %> 前缀默认： c


过滤器：

普通类具有特定功能，继承或者实现完成，或者加注解；
implement Filter
javax.servlet.Filter

配置文件配置过滤器，类似servlet

<filter>
<filter-mapping>



XMLHttpRequest

setRequestHeader(header,value);

send():
    get: send(null);
    post: send(参数值)

setReqeustHeader(header,value);
    get: 不需要设置此方法
    post：需要设置

a.如果请求元素中包含了文件上传：
   setRequestHeader("Content-Type","multipart/form-data")

b.不包含了文件上传：
   setRequestHeader("Content-Type","application/x-www-form-urlencoded")

   Json
   引入jar包：
   commons-beanutls-1.7.0.jar
   commons-collections-3.2.1.jar 
   commons-lang-2.6.jar 
   commons-logging-1.1.3.jar 
   ezmorph-1.0.6.jar 
   json-lib-2.4-jdk15.jar 



dbcp连接池：
引入jar包：
commons-dbcp-1.4.jar 


c3p0 连接池：

c3p0.jar  
c3p0-oracle-thin-extras.jar 

apache DBUtils

事务：
单个线程在某个连续的时间段内获取的一个数据库连接资源，对数据库进行的一个DML操作或一系列DML操作的集合；

ThreadLocal只能解决共享资源只读的情况的多线程，无法解决对共享资源进行写操作的情况；


一个事务，一个Connection:         Connection -->pstms -->update 

一般来说，一个service包含多个dao操作，应该包含在一个事务中：

转账一般会有各种银行的数据库，中国银行和建设银行，他们的数据库应该是相互独立的，
如果要进行跨行操纵，例如中国银行和建设银行账户转账，首先要连接中国银行数据库的中国connection，对中国银行数据库的个人账号进行减100操作；
同时要对建设银行数据进行操作，要连接建设银行数据库的建设connection，对建设银行数据库的个人账号进行加100操作；
但是"中国银行connection"和"建设银行connection"应该不是同一个connection，他们属于不同的数据库连接；


 数据库元数据：，通过connection连接获取，通过prepareStatement获取；通过结果集ResultRet获取；

下载apache工具：https://httpd.apache.org/



