应用服务器：

tomcat， jboss， weblogic

客户端==>  服务器 ==JDBC==>    数据库

优点：
1.提升访问的性能： 通过内存读取，无需访问数据库
2.降低网络的拥堵： pipeline管道的方式（批处理方式）
3.减轻服务器负载： 主从复制，读写分离； 主写副读；
4.增强可扩展性：集群的扩展；

缺点：
1.增加系统的复杂度；
2.增加成本；
3.数据一致性问题；


缓存开发规范：

JSR-107

CachingProvider：
CacheManager:
Cache:
Entry:
Expiry:


缓存架构模式：

Cache Aside Pattern(旁路缓存):
Read/Write Through Pattern（读写穿透）:
Write Behind Caching Patten（异步缓存写入）:

1.Cache Aside Pattern(旁路缓存):
先更新数据库，后更新缓存；

适用场景：
缓存数据的计算逻辑比较复杂；
对数据一致性要求较高；
数据变更不频繁，没有超大并发的热点key。

存在问题：
由于更新操作会删除缓存的数据，所以存在某些热点key被删除，则会导致瞬时大量请求穿透到DB；
不能保证数据存储和缓存之间的一致性；
本地缓存和分布式缓存可能存在数据不一致的风险；

2.Read/Write Through Pattern（读写穿透）:
由数据存储服务来管理cache和DB的读写;
先写缓存，由缓存再写入数据库；

读操作比较多，比第一种更适合缓存一致性的场景；
使用简单，屏蔽类底层数据库的操作，只是操作缓存；
可以以redis为存储，对数据的持久性要求较低；
（秒杀）

3.Write Behind Caching Patten（异步缓存写入）:

更新缓存，异步更新数据库；

不是由持久化方式吗？ 为什么会数据丢失？

优点：
将多个请求merge成一个进行处理。比如对一些计数业务，一条短视频被点赞1万次，如果连续更新1万次DB代价很大，而合成一次请求直接加1万，则是一个轻量级操作；

存在的问题：
数据的一致性变差，甚至在一些极端场景下可能丢失数据，比如系统Crash，机器宕机，如果还有数据没保存到DB，则会发生丢失的风险；

缺点：
对数据一致性要求不高；
更新操作比较频繁；





===================Redis=====================================

redis作为缓存的一个具体实现：

1.支持数据持久化
2.支持更多的数据类型，list，set，zset，hash等
3.支持数据的备份，即master-slave 模式的数据备份；
4. Redis的所有操作都市原子性的；要么成功完全执行，要么失败全部回退；单个操作是原子性的，多个操作也支持事物；通过multi和exec指令包裹；
5.丰富的特性， public/subscribe



multi: 开启事物
exec：提交事物
discard： 回滚事物
watch： 命令用于监视一个或多个键。如果在事物执行之前的键被其他命令改动，那么事物将被自动回滚；





