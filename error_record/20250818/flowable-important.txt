──────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│  > 我現在理解了模型，定義，實例的關係，你可以講講flowable-demo這個demo項目裏面是如何利用RuntimeService和Tas │
│    kService這兩個對象實現了一個基本審批流嗎？                                                               │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

✦ 当然可以。我们结合 flowable-demo 的代码，把刚才的理论知识串联起来，走一遍完整的审批流程。

  这个过程就像一场由 Flowable 引擎导演，RuntimeService 和 TaskService 担任主角的话剧。

  ---

  第 0 幕：准备阶段 (应用启动)

   1. 当您的 Spring Boot 应用启动时，Flowable 引擎也随之启动。
   2. 引擎会自动扫描项目，发现了 resources/processes/one-task-process.bpmn20.xml 这个流程模型 (Model)。
   3. 引擎会解析这个模型，并在数据库中创建出一个带版本号的流程定义 (Definition)。
   4. 此时，万事俱备，舞台已搭好，但还没有任何流程在运行。

  ---

  第 1 幕：发起审批 (调用 `RuntimeService`)

   1. 用户操作： 您在前端点击 “Start New Process” 按钮。
   2. 代码执行： 后端的 ProcessController 调用了 startProcessInstance() 方法。
   3. 核心代码： runtimeService.startProcessInstanceByKey("oneTaskProcess");
   4. 背后发生的事：
       * RuntimeService 登场，它的角色是“流程实例管理员”。
       * 它接收到指令，根据 key 为 "oneTaskProcess" 的流程定义，创建出了一个流程实例 (Instance)。
       * 这个新创建的实例开始运行，它从【开始节点】出发，沿着流程图的箭头，走到了第一个节点——【User Task: My
         Task】。
       * 当实例进入这个人工任务节点时，引擎会说：“哦，这里需要人来处理”。于是它在数据库的任务表里创建了一个待
         办任务，并根据模型中的 flowable:assignee="demoUser"，把这个任务的负责人设置为 demoUser。
       * 做完这些后，这个流程实例就暂停在这里，静静地等待任务被完成。

  ---

  第 2 幕：查询待办 (调用 `TaskService`)

   1. 用户操作： 前端页面加载，需要显示待办任务列表。
   2. 代码执行： ProcessController 调用 getTasks() 方法。
   3. 核心代码： taskService.createTaskQuery().taskAssignee("demoUser").list();
   4. 背后发生的事：
       * TaskService 登场，它的角色是“待办任务管家”。
       * 它接收到查询指令，立刻去数据库的任务表中，把所有指派给 demoUser 的任务都找出来。
       * 它找到了刚才在第 1 幕中创建的那个“My Task”，然后把任务信息返回给前端展示。

  ---

  第 3 幕：完成审批 (再次调用 `TaskService`)

   1. 用户操作： 您在前端点击 “Complete” 按钮。
   2. 代码执行： ProcessController 调用 completeTask() 方法，并传入了要完成的任务 ID。
   3. 核心代码： taskService.complete(taskId);
   4. 背后发生的事：
       * “待办任务管家” (TaskService) 再次出马。它根据任务 ID
         找到这个待办任务，并将其状态标记为“已完成”（然后从运行时任务表移到历史任务表）。
       * 关键联动： 当任务被完成后，引擎会得到通知，之前那个暂停的流程实例被“唤醒”了。
       * 引擎会再次查看流程定义（设计图），看看【User Task】的下一步是什么。它发现箭头指向了【结束节点】。
       * 于是，流程实例继续前进，到达【结束节点】。当到达结束节点时，这个实例的使命就完成了，引擎会把它从运行
         时的数据库表中清理掉，并归档到历史记录中。
       * 至此，一个完整的审批流程结束。

  总结

  在这个 Demo 中，RuntimeService 和 TaskService 分工明确：

   * RuntimeService 只负责“从 0 到 1”，即根据模板（定义）启动一个全新的流程实例。
   * TaskService 则负责处理流程过程中的“人工交互”，包括查询谁有什么待办，以及处理这些待办。

  它们俩就像是左手和右手，由 Flowable 引擎这个大脑统一指挥，共同完成了一次审批。

#############################################################################################
────────────────────────────────────────────────────────────────────────────────────────────────╮
│  > * 关键联动： 当任务被完成后，引擎会得到通知，之前那个暂停的流程实例被“唤醒”了。這個“唤醒”   │
│    是什麽意思？flowable是如何實現的？ 和流程模型，流程定義，流程實例有哪些關聯                 │
╰────────────────────────────────────────────────────────────────────────────────────────────────╯

✦ 您这个问题提得非常好，直击了流程引擎最核心的工作机制！

  “唤醒”是我用的一个比喻，它的技术本质是：让一个处于“等待状态”的流程实例，重新变为“活动状态”，并把它推向流程图
  的下一步。

  Flowable 的实现精髓在于以数据库为中心的状态机。下面我详细解释这个过程，以及它与模型、定义、实例的关联。

  ---

  Flowable 是如何实现的？

  整个过程可以看作是一次严谨的数据库事务操作。

   1. “沉睡”的流程实例：
      当我们的流程实例走到【User Task】时，它并没有消失，而是进入了“等待状态”。在数据库层面，ACT_RU_EXECUTION
  这张表里有一行数据代表这个流程实例，它的一个字段记录着当前正“停靠”在 theTask 这个节点上。同时，ACT_RU_TASK
  表里也增加了一行，表示那个需要人工处理的具体任务。这两张表通过 ID 相互关联。

   2. `taskService.complete()` 的连锁反应：
      当您调用这个方法时，引擎内部会启动一个数据库事务，执行一连串操作：
       * A. 找到并删除任务： 引擎先根据 taskId 在 ACT_RU_TASK
         表中找到这个任务，处理它（比如记录到历史表），然后把它从运行任务表中删除。
       * B. 找到并“唤醒”实例： 通过任务表中的外键，引擎能精确地找到 ACT_RU_EXECUTION 表里那个“沉睡”的流程实例。
         删除任务的动作，就相当于一个“信号”，告诉这个实例：“你不用再等了，可以继续前进了”。
       * C. 查阅地图（关键步骤）：
         实例被唤醒后，它需要知道下一步该去哪。这时，引擎会去加载这个实例对应的那个流程定义
         (Definition)。这个“定义”就像一张精确的地图，包含了所有节点的连接关系。
       * D. 推向下一步： 引擎在“地图”（流程定义）上找到当前节点
         (theTask)，然后沿着它后面的箭头，找到了下一个节点是 endEvent。
       * E. 更新实例状态： 引擎立刻更新 ACT_RU_EXECUTION
         表里那行代表流程实例的数据，把它“停靠”的位置改为新的节点 endEvent。
       * F. 到达终点并终结：
         当引擎发现实例的新位置是【结束节点】时，它知道这个实例的生命周期结束了。于是，它会把 ACT_RU_EXECUTION
         表里这行数据删除，并把整个实例的信息归档到历史记录表（ACT_HI_* 系列表）中。
       * G. 提交事务： 以上所有数据库操作全部成功后，事务提交。

  ---

  与模型、定义、实例的关联

   * 流程实例 (Instance):
     是这场“唤醒”大戏的主角。它就是那个在数据库中被持续更新状态的实体。整个过程就是它的状态从“等待于 A
     节点”变为“运行结束”的过程。

   * 流程定义 (Definition): 是引擎在“唤醒”后拿来查阅的地图和规则书。当实例不知道下一步该去哪时，引擎总是通过查
     询“定义”来获得精确的导航。没有它，引擎就不知道 theTask 的下一步是 endEvent。

   * 流程模型 (Model): 是“定义”的原始设计图。它在整个“唤醒”的运行时机中不被直接使用，但它是“定义”的来源。地图（
     定义）之所以是这样，完全是因为最初的设计图（模型）就是这么画的。

  总结：

  “唤醒”的本质，是 `taskService.complete()` 这个外部指令触发的一次数据库事务，在这个事务中，Flowable
  引擎根据“流程定义”作为规则，修改了“流程实例”在数据库中的状态，从而驱动它从一个节点精确地流转到下一个节点。

  这套机制保证了即使服务器宕机重启，流程的状态也因为被持久化在数据库中而不会丢失，重启后依然能从上次等待的地
  方继续。

#############################################################################################
 好的，我们已经完成了对前后端的全部改造。这是一个比较大的更新，我们一起回顾一下：

  改造内容总结

  后端 (flowable-demo):
   1. 集成安全框架: 引入了 Spring Security，为应用提供了企业级的安全认证功能。
   2. 用户管理: 添加了 User 实体和 T_USER 数据库表。应用启动时会自动创建表并插入三个样例用户 (user1, user2,
      manager)，密码统一为 password。
   3. 密码安全: 所有数据库中的密码都使用 BCrypt 进行了加密。
   4. 动态流程: 流程任务现在会动态地分配给当前登录的用户，而不是写死的 demoUser。
   5. 安全API: 所有 API 接口（除登录外）现在都需要认证后才能访问。

  前端 (flowable-demo-ui):
   1. 多页面应用: 使用 react-router-dom 将应用改造为多页面架构。
   2. 认证流程:
       * 实现了完整的登录、登出流程。
       * 使用 Context 在整个应用中管理用户的登录状态。
       * 通过“保护路由”确保只有登录用户才能访问业务页面。
   3. 全新UI:
       * 登录页: 引导用户通过浏览器进行 HTTP Basic 认证。
       * 首页: 显示欢迎信息并提供“发起流程”功能。
       * 我的待办页: 用于查询和处理当前用户的所有待办任务。

  ---

  最终运行指南

  请您按照以下步骤来运行和测试这个全新的 Demo：

  1. 启动后端
      * 在 flowable-demo 目录下，重新用 mvn spring-boot:run 命令启动后端。
      * 注意: 首次启动时，Spring Boot 会自动执行 schema.sql，在您的 test 数据库中创建 T_USER 表并插入样例数据。

  2. 启动前端
      * 请务必进入 flowable-demo-ui 目录。
      * 首先，安装新依赖:
   1      npm install
      * 然后，启动应用:
   1      npm run dev

  3. 如何使用
      * 浏览器访问前端地址（如 http://localhost:5173），您应该会看到登录页面。
      * 点击 Login 按钮，浏览器会弹出认证窗口。
      * 输入用户名 user1 和密码 password。
      * 登录后，您可以在首页发起流程，然后在 "My Tasks" 页面看到分配给 user1 的任务并进行处理。

  所有改造已经完成，现在您可以体验一个更完整、更真实的业务流程应用了。

#############################################################################################


#############################################################################################




#############################################################################################



#############################################################################################



#############################################################################################


#############################################################################################



#############################################################################################





#############################################################################################


#############################################################################################


#############################################################################################




#############################################################################################



#############################################################################################



#############################################################################################


#############################################################################################



#############################################################################################


#############################################################################################




#############################################################################################



#############################################################################################



#############################################################################################


#############################################################################################



#############################################################################################





#############################################################################################


#############################################################################################


#############################################################################################




#############################################################################################



#############################################################################################



#############################################################################################


#############################################################################################




#############################################################################################


#############################################################################################




#############################################################################################



#############################################################################################



#############################################################################################


#############################################################################################



#############################################################################################





#############################################################################################


#############################################################################################


#############################################################################################




#############################################################################################



#############################################################################################



#############################################################################################


#############################################################################################




#############################################################################################


#############################################################################################




#############################################################################################



#############################################################################################



#############################################################################################


#############################################################################################



#############################################################################################





#############################################################################################


#############################################################################################


#############################################################################################




#############################################################################################



#############################################################################################



#############################################################################################


#############################################################################################
