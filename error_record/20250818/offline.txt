 create-thin-deployment.sh 脚本功能解析

  脚本整体目的

  这个脚本是一个部署打包工具，它的作用是将 Maven 构建后的文件重新组织成一个完整的、可以直接部署的包。

  详细功能分析

  1. 环境准备 (第1-12行)

  #!/bin/bash
  echo "Creating Thin JAR Deployment Package..."

  TARGET_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
  DEPLOY_DIR="$TARGET_DIR/thin-jar-deployment"

  # 創建部署目錄
  if [ -d "$DEPLOY_DIR" ]; then
      rm -rf "$DEPLOY_DIR"
  fi
  mkdir -p "$DEPLOY_DIR"

  功能：
  - 获取脚本所在目录（即 target/ 目录）
  - 定义部署目录为 target/thin-jar-deployment/
  - 如果部署目录已存在则删除（确保干净的环境）
  - 创建新的部署目录

  2. 复制核心应用文件 (第14-15行)

  echo "Copying thin jar..."
  cp "$TARGET_DIR/pap-server-thin.jar" "$DEPLOY_DIR/"

  功能：复制精简版应用 JAR 包（1.9MB，只包含应用代码）

  3. 复制依赖库 (第17-18行)

  echo "Copying dependencies..."
  cp -r "$TARGET_DIR/lib" "$DEPLOY_DIR/"

  功能：复制整个 lib/ 目录（131MB，包含240+个依赖jar包）

  4. 复制启动脚本 (第20-23行)

  echo "Copying startup scripts..."
  cp "$TARGET_DIR/start.bat" "$DEPLOY_DIR/"
  cp "$TARGET_DIR/start.sh" "$DEPLOY_DIR/"
  chmod +x "$DEPLOY_DIR/start.sh"

  功能：
  - 复制 Windows 和 Linux 启动脚本
  - 为 Linux 脚本添加执行权限

  5. 复制文档 (第25-26行)

  echo "Copying documentation..."
  cp "$TARGET_DIR/DEPLOYMENT.md" "$DEPLOY_DIR/"

  功能：复制部署说明文档

  6. 创建配置模板 (第28-31行)

  echo "Creating config templates..."
  mkdir -p "$DEPLOY_DIR/config"
  [ -f "$TARGET_DIR/classes/application.yaml" ] && cp "$TARGET_DIR/classes/application.yaml"
  "$DEPLOY_DIR/config/application-template.yaml"

  功能：
  - 创建 config/ 目录
  - 复制默认配置文件作为模板（如果存在）

  7. 输出结果信息 (第33-46行)

  echo "Thin JAR deployment package created successfully!"
  echo "Location: $DEPLOY_DIR"
  # ... 输出包内容和大小信息

  功能：显示打包完成信息和包内容总结

  与 mvn package 的关系

  你的理解是正确的！完整流程是：

  1. Maven 构建阶段 (在 IDEA 中)

  mvn clean package -DskipTests

  产生的文件：
  - target/pap-server-fat.jar (完整包)
  - target/pap-server-thin.jar (精简包)
  - target/lib/ (依赖目录)
  - target/classes/ (编译后的类文件)

  2. 部署打包阶段 (使用此脚本)

  ./create-thin-deployment.sh

  重新组织成：
  thin-jar-deployment/
  ├── pap-server-thin.jar    # 应用主体
  ├── lib/                   # 所有依赖
  │   ├── spring-boot-*.jar
  │   ├── mybatis-*.jar
  │   └── ... (240+ jars)
  ├── start.bat              # Windows启动
  ├── start.sh               # Linux启动
  ├── DEPLOYMENT.md          # 部署文档
  └── config/                # 配置模板
      └── application-template.yaml

  脚本的价值

  1. 文件整理

  - 将 Maven 构建的散乱文件整理成部署友好的结构

  2. 一键打包

  - 自动收集所有必要的部署文件
  - 避免手动复制时遗漏文件

  3. 部署就绪

  - 生成的包可以直接传输到目标服务器
  - 包含所有启动和配置文件

  4. 版本管理

  - 每次运行都创建干净的部署包
  - 便于版本对比和回滚

  使用流程总结

  # 步骤1：在 IDEA 中构建项目
  mvn clean package -DskipTests

  # 步骤2：运行打包脚本
  cd target/
  ./create-thin-deployment.sh

  # 步骤3：部署包就绪
  # 将 thin-jar-deployment/ 整个目录传输到目标服务器
  # 在目标服务器上运行 ./start.sh 即可启动

  这个脚本本质上是一个部署前的最后整理步骤，确保所有文件都以最佳方式组织在一起！


