
面嚮對象的架構特點：

封装（Encapsulation）：

对象将数据和操作数据的方法封装在一起，提供清晰的接口，隐藏内部实现细节。
继承（Inheritance）：

通过继承机制，子类可以复用父类的属性和方法，促进代码的重用和扩展。
多态（Polymorphism）：

同一接口可以对应不同的实现，通过动态绑定实现不同对象对同一消息的不同响应。
模块化（Modularity）：

系统由多个相互独立的对象组成，便于理解、维护和测试。


常见的面向对象架构模式
模型-视图-控制器（MVC）：

通过模型（数据）、视图（用户界面）和控制器（业务逻辑）的分离，实现关注点分离。
模型-视图-视图模型（MVVM）：

主要用于数据绑定和界面更新，常见于WPF和其他前端框架。
领域驱动设计（Domain-Driven Design, DDD）：

强调围绕领域模型构建系统，使用面向对象的方式来表达业务逻辑。
命令-查询责任分离（CQRS）：

将读操作和写操作分开，使用不同的模型来处理命令和查询。
代理模式（Proxy Pattern）：

通过代理对象控制对其他对象的访问，可以用于懒加载、权限控制等场景。
总结
面向对象架构通过将系统组织成对象及其交互，促进了可重用性、灵活性和可维护性。适合复杂的业务逻辑和需要高内聚低耦合的系统设计。


基於規則的架構：

1.规则引擎架构（Rule Engine Architecture）
使用规则引擎来处理复杂的业务逻辑，能够动态评估和执行一系列预定义的规则。常见的规则引擎有Drools、Jess等。
2. 专家系统架构（Expert System Architecture）
专家系统利用知识库和推理引擎，通过规则来模拟人类专家的决策过程，常用于医疗、金融等领域。
3. 事件驱动规则架构（Event-Driven Rule Architecture）
在事件驱动的系统中，系统根据事件的发生和相关规则进行响应，适用于需要实时决策的应用。
4. 决策支持系统（Decision Support Systems, DSS）
利用规则和数据分析为决策者提供支持，帮助评估选项和预测结果。
5. 基于规则的工作流管理（Rule-Based Workflow Management）
在工作流管理系统中，通过定义规则来控制任务的流转和执行条件，适用于业务流程自动化。
6. 动态配置和规则管理系统
允许用户或管理员动态修改规则，无需重新编译或部署应用程序，从而提高系统的灵活性和适应性。
7. 基于规则的推理系统（Rule-Based Reasoning Systems）
通过规则推理来得出结论，常见于人工智能和机器学习的某些应用。



需要將用戶級別、折扣規則等描述為可動態修改的規則數據；

案例：
案例一：質量屬性（架構風格對比）
案例二：數據流圖（系統流程圖）
案例三：嵌入式（放棄）
案例四：數據庫
案例五：系統架構（sql注入）

論文：
論文一：軟件設計方法及其應用；
論文二：軟件系統架構評估及其應用；
論文三：數據湖技術及其應用；


正確：
數據庫鏈接： 用戶名@租戶名#集群名
錯誤：
數據庫鏈接： 用戶名@租戶名#集群名:Id