Armstrong公理系统的三个基本公理

自反律（Reflexivity Rule）
如果 Y⊆X，则 𝑋→𝑌

增广律（Augmentation Rule）：
如果 X→Y，则对于任意属性集 𝑍 ，XZ→YZ 也成立

传递律（Transitivity Rule）：
如果 X→Y 且 Y→Z，则 X→Z

Armstrong公理的推理规则

并规则（Union Rule）：

如果 X→Y 和 X→Z，则 X→YZ。
解释：如果属性集 X 函数依赖于 Y，并且 X 也函数依赖于 Z，那么 X 必然依赖于 YZ 的组合。

分解规则（Decomposition Rule）：

如果 X→YZ，则 X→Y 和 X→Z。
解释：如果属性集 X 函数依赖于属性集 YZ 的组合，那么我们可以将其分解为两个依赖关系 X→Y 和 X→Z。
例子：如果 A→BC，则可以推导出 A→B 和 A→C。

伪传递规则（Pseudotransitivity Rule）：

如果 X→Y 且 WY→Z，则 WX→Z。
解释：这是对传递规则的扩展，如果 X 依赖于 Y，并且 WY 依赖于 Z，那么我们可以推导出 WX 依赖于 Z。


Armstrong公理系统的用途
推导新的函数依赖：

Armstrong公理系统的主要用途是基于一组已知的函数依赖，推导出新的函数依赖。通过应用这些规则，我们可以验证某些属性是否满足依赖关系。
验证函数依赖的完备性：

使用Armstrong公理系统，我们可以确定一个函数依赖集是否完备，即从一组给定的函数依赖中，是否可以推导出所有其他可能的依赖。
闭包计算：

通过Armstrong公理系统，我们可以计算出一个属性集的闭包（Closure），即从某一组属性集可以推导出的所有属性集。这对于数据库的候选码判断非常重要，因为候选码就是那些能确定表中所有属性的最小属性集。


Armstrong公理的意义
Armstrong公理系统为数据库设计中的规范化提供了强有力的理论工具。通过这些公理，数据库设计者可以推导出关系中的各种函数依赖，并且可以通过函数依赖分析数据库的属性间关系，进而实现数据库的规范化，减少数据冗余和异常。

数据规范化：Armstrong公理系统帮助我们在规范化过程中确定哪些属性是主键、哪些属性是部分依赖或传递依赖，从而帮助数据库设计师在第三范式（3NF）或BCNF中更好地设计数据库。

减少数据冗余：通过函数依赖的分析，Armstrong公理系统能帮助设计者减少不必要的数据冗余和异常更新，确保数据库中的数据保持一致性和完整性。

总结：
Armstrong公理系统是数据库理论中用来推导函数依赖关系的重要工具，它为函数依赖的推导提供了一套完整的规则。这些规则帮助我们理解和分析属性之间的依赖关系，确保数据库设计能够达到更高的规范化层次，减少冗余数据和数据异常。

Armstrong公理系统包括三条核心公理：自反律、增广律、传递律，以及通过它们推导出的扩展规则，如并规则、分解规则和伪传递规则。这些规则共同构成了数据库设计的基础，为数据库的函数依赖推导提供了理论依据。



记忆：

Y⊆X 和 𝑌→𝑋 是完全不同的概念。前者是集合包含关系，而后者是属性之间的依赖关系


Y⊆X⊆U，则X->Y

若X->Y，Z⊆Y，则X->Z
我知道了，是不是这样的：
X->Y，Z⊆Y中Z⊆Y可以根据自反律转为Y->Z，就有了X->Y，Y->Z，最后根据传递律可以得到X->Z


若X->Y，Z⊆Y，则X->Z
你上面说它是基于分解规则，但是我看了分解规则是这样的：

分解规则（Decomposition Rule）：
如果 X→YZ，则 X→Y 和 X→Z。



- **\( R(A, B, C, D) \)** 和 **\( S(A, C, E, F) \)**：这是两个关系，它们包含不同的属性。
- **\( σ \)**：表示选择操作，它用于从关系中筛选出满足某些条件的元组。
- **\( π \)**：表示投影操作，它用于从关系中选择出特定的属性列。
- **\( × \)** 或 \( R \bowtie S \)：表示关系的笛卡尔积或自然连接。

